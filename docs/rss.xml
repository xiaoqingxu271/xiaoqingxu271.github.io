<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>小情绪271的博客</title><link>https://xiaoqingxu271.github.io</link><description>我是小情绪271,一个分享有关java知识的博主</description><copyright>小情绪271的博客</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://img95.699pic.com/photo/40127/0864.gif_wh860.gif</url><title>avatar</title><link>https://xiaoqingxu271.github.io</link></image><lastBuildDate>Tue, 12 Aug 2025 16:13:01 +0000</lastBuildDate><managingEditor>小情绪271的博客</managingEditor><ttl>60</ttl><webMaster>小情绪271的博客</webMaster><item><title>深拷贝，浅拷贝，引用拷贝的区别</title><link>https://xiaoqingxu271.github.io/post/shen-kao-bei-%EF%BC%8C-qian-kao-bei-%EF%BC%8C-yin-yong-kao-bei-de-qu-bie.html</link><description># 浅拷贝
理解：会在堆上在创建一个对象，如果对象内部的属性是引用类型，那么clone后的对象与原对象的属性会共享同一个引用类型
## 创建两个类Address和Person，他们分别都实现了Cloneable接口，重写clone方法，其中Person的内部属性是引用类型的Address
![Image](https://github.com/user-attachments/assets/db33b07a-a7bc-432d-85d8-c555425c66d9)
![Image](https://github.com/user-attachments/assets/e38373ba-dd22-4def-9bf3-527176659e2d)
## 编写测试类，查看clone前后对象的Address是否指向同一个地址
![Image](https://github.com/user-attachments/assets/7823b052-7e61-4cb7-a0d8-241b15022210)
总结：浅拷贝后的对象内部引用类型的属性会共享

# 深拷贝
理解：会在堆上创建一个对象，但是对比与浅拷贝，他不会共享内部属性是引用类型的，而是创建新的引用类型属性
## 在浅拷贝的代码基础上，修改Person类的Clone方法
![Image](https://github.com/user-attachments/assets/d9472e83-76e8-4491-add8-b2a54c1bd9b6)
## 编写测试类，查看clone前后对象的Address是否指向同一个地址
![Image](https://github.com/user-attachments/assets/5ffb8750-9ed6-4618-ad95-0f2f5678fa6c)
总结：深拷贝是将原来的对象全部复制一份到堆内存中

# 引用拷贝
理解：不同的引用指向同一个对象

# 一张图来描述浅拷贝、深拷贝、引用拷贝
![Image](https://github.com/user-attachments/assets/21dfe31a-814d-474f-960a-600bd01d3352)。</description><guid isPermaLink="true">https://xiaoqingxu271.github.io/post/shen-kao-bei-%EF%BC%8C-qian-kao-bei-%EF%BC%8C-yin-yong-kao-bei-de-qu-bie.html</guid><pubDate>Sun, 22 Jun 2025 07:22:01 +0000</pubDate></item><item><title>RBAC详解</title><link>https://xiaoqingxu271.github.io/post/RBAC-xiang-jie.html</link><description>RBAC(基于角色的访问控制)：通过角色来**分配**和**管理**用户和菜单的权限
RBAC图解
![Image](https://github.com/user-attachments/assets/9061df3e-ceaa-42a3-9814-5ef954baeffd)
**总结：** 通过给不同的用户划分角色，给角色划分不同的菜单权限，来实现不同用户拥有不同的菜单权限
若依框架的使用流程
1，创建菜单
2，创建角色，为角色绑定菜单权限
3，创建用户，为用户绑定角色。</description><guid isPermaLink="true">https://xiaoqingxu271.github.io/post/RBAC-xiang-jie.html</guid><pubDate>Thu, 19 Jun 2025 07:41:50 +0000</pubDate></item><item><title>hotspot中的垃圾回收器</title><link>https://xiaoqingxu271.github.io/post/hotspot-zhong-de-la-ji-hui-shou-qi.html</link><description># 垃圾回收器的组合情况
![Image](https://github.com/user-attachments/assets/377af26f-b7bf-4279-9701-ccbc2f61fdf1)
## 第一种组合serial和serialOld
Serial：是一种单线程串行回收年轻代的垃圾回收器
优点：单cpu处理器下的吞吐量非常高
缺点：多cpu处理器下的吞吐量不如其他的垃圾回收器，如果堆的内存非常大，会让用户处于较长时间的等待
应用场景：编写java客户端程序，或者单cpu硬件下的场景
SerialOld：是一种单线程串行回收老年代的垃圾回收器
优点：单cpu处理器下的吞吐量非常高
缺点：多cpu处理器下的吞吐量不如其他的垃圾回收器，如果堆的内存非常大，会让用户处于较长时间的等待
应用场景：与Serial组合使用，CMS在特定情况下会调用SerialOld

## 第二种组合ParNew和CMS
ParNew：多线程回收年轻代的垃圾回收器
优点：多cpu下执行时间短
缺点：吞吐量不如G1，JDK9之后不建议在使用
应用场景：与老年代的CMS配合使用
CMS(Current Mark Sweep)：关注的是系统的执行时间，允许用户线程和垃圾回收线程同时执行，减少用户等待的时间
CMS的执行步骤
1，初始标记：极短的时间将GC Root关联的对象进行标记
2，并发标记：标记所有的对象，用户线程不用暂停
3，重新标记：由于并发阶段对象的状态可能发生变化，存在错标，漏标的问题，需要重新标记
4，并发清理：清理死亡对象，用户线程不需要暂停
优点：垃圾回收的时间短，用户等待时间减少，体验感上升
缺点：
1，出现碎片化的内存(使用的是标记-清理算法)，CMS会在Full GC之后对内存碎片进行整理，可以设置几次Full GC后整理
2，浮动垃圾问题：在并发清理阶段，由于用户线程还在执行，就可能出现刚创建的对象没用之后，没有被回收
3，退化问题：如果老年代的内存无法分配，CMS就会退化成SerialOld单线程回收老年代

## 第三种组合Parallel Scavenge和Parallel Old
Parallel Scavenge：多线程并行回收年轻代的垃圾回收器，关注的是系统的吞吐量，具有自动调整堆内存分配的特点
优点：可以提高系统的吞吐量，而且手动可控
缺点：不能保证单次的执行时间
应用场景：后台任务，不需要与用户交互，并且容易尝试大量对象比如，数据处理，大文件导出
Parallel Old：为Parallel Scavenge专门设计，并发处理老年代的垃圾回收器
优点：并发收集，多核cpu下效率高
缺点：暂停时间长
应用场景：与Parallel Scavenge配套使用

## 最后一种G1垃圾回收器
内存结构：将堆划分成多个大小相等的区，称为Region区，区域不要求是连续的，分为Eden，Survivor，Old区
Region空间的大小为堆内存/2048，也可以通过虚拟机参数来指定Region大小
两种回收方式：年轻代回收(Young GC)，老年代回收(Mixed GC)
### G1垃圾回收器的执行流程
1，新创建的对象会放在Eden区，当G1判断年轻代的内存不足时(max默认为60%)，会执行Young GC
2，标记出Eden，Survivor区存活的对象
3，根据最大暂停时间来选择某些区域将存活的对象复制到一个新的Survivor区（标记这些存活对象的年龄+1），清空这些区域
每次Yong GC，都会去记录回收每个Eden区和Survivor区的平均时间，下次回收时，以平均时间为参照，根据配置的最大暂停时间来选择回收多少个区域
4，后续Young GC相同，只不过Survivor区存活的对象会被搬运到另外一个Survivor区
5，当某个Survivor区的对象存活时间超过了阈值(默认是15)，就会被放入老年代中
6，部分堆对象超过了Region区大小的一半，会被直接放入老年代，这种老年代称为Humongous区，如果对象过大会横跨Region区
7，多次回收后，会出现多个Old老年代区，此时总堆占有率达到阈值(max为45%)，会执行Mixed GC 回收所有年轻代，部分老年代以及大对象区(Humongous)
8，Mixed GC：包括了初始标记，并发标记，最终标记，并发清理
![Image](https://github.com/user-attachments/assets/fca4cdcb-043a-4292-8cdc-1c6028c3fc82)
9，如果清理过程中发现没有足够的Region区来转移对象，那么就会执行Full GC
优点：
1，对回收较大的堆内存，延迟可控(在年轻代回收和老年代回收时，根据最大暂停时间来选择回收部分区域，而不是全部回收)
2，使用复制算法，不会产生内存碎片
缺点：
JDK8以前不成熟
应用场景：JDK8以后建议默认使用。</description><guid isPermaLink="true">https://xiaoqingxu271.github.io/post/hotspot-zhong-de-la-ji-hui-shou-qi.html</guid><pubDate>Mon, 16 Jun 2025 10:16:17 +0000</pubDate></item><item><title>JVM中的垃圾回收算法</title><link>https://xiaoqingxu271.github.io/post/JVM-zhong-de-la-ji-hui-shou-suan-fa.html</link><description>## 一，标记-清除算法
1. 在标记阶段，会将存活的对象进行标记，根据可达性分析算法，从GC Root对象开始通过引用链遍历出所有存活的对象
2. 在清除阶段，从内存中删除非标记对象
优点：在标记阶段，为每个存活的对象维护一个标志位，在清除阶段，清除没有标志位的对象
缺点： 
### 1. 内存碎片化
清除非标记对象后，内存中会出现不连续的内存碎片，可能会造成内存空间过小而无法分配
### 2. 分配速度慢
清除非标记对象后，会将空闲的内存空间维护成一个链表，在下一次分配内存空间，就要遍历链表，找到符合的空间大小

## 二，复制算法
1，将堆内存分成from内存和to内存，对象创建在from内存中
2，在垃圾回收阶段，将GC Root对象移动到to内存中
3，将GC Root关联的对象也移动到to内存中
4，清除from内存，将from和to内存的名称互换
优点：
### 1，吞吐量高
### 2，不会发生碎片化
缺点：
### 内存使用效率低：
每次只使用堆内存空间大小的一半来存储对象 

## 三，标记-整理算法
1. 在标记阶段，会将存活的对象进行标记，根据可达性分析算法，从GC Root对象开始通过引用链遍历出所有存活的对象
2. 在清除阶段，从内存中删除非标记对象
3. 在整理阶段，会将存活的对象移动到堆的一端，将空闲的内存空间连续起来使用
优点：
### 1，内存使用率高
### 不会发生碎片化的问题
缺点：
### 2，整理阶段效率不高
可以使用Two-finger，表格算法，ImmixGC算法来优化这个阶段

## 四，分代GC
1，分代GC的内存示意图
![Image](https://github.com/user-attachments/assets/957cf559-ebd4-4478-b499-83ff9c2f7dba)
2，分代回收时，创建出来的对象，会被放入伊甸园区和from区
随着对象在Eden中创建的越来越多，如果Eden区被装满，就会触发年轻代GC 称为Miner GC 或者 Young GC
实质就是通过复制算法，将需要的对象经行回收，不回收的对象放在to区，并且每次Miner GC 之后，都会为存活的对象记录年龄，
初始值为0，GC后加1
3，Miner GC记录存活的对象年龄达到阈值(最大值为15，值与垃圾回收器有关)，对象就得到晋升被放在老年代中
4，当老年代被对象装满，年轻代的对象也被装满，在往伊甸园区添加对象，会先尝试Miner GC，如果Miner GC后没有对象被回收，
就会触发Full GC回收，Full GC 会对整个堆的对象进行回收
5，如果Full GC后 仍然无法对老年代的对象回收，就会抛出Out Of Memory异常

## 五，为什么分代GC要将堆分为年轻代和老年代
1，可以通过调整年轻代和老年代的大小来适配不同的应用程序，提高内存的利用率和性能
2，年轻代使用GC算法为复制算法，老年代使用的GC算法为标记-清除算法或者标记-整理算法
3，分代的设计中只允许对年轻代经行回收，如果能满足对象分配，就不需要执行Full GC，等待时间就会变少。</description><guid isPermaLink="true">https://xiaoqingxu271.github.io/post/JVM-zhong-de-la-ji-hui-shou-suan-fa.html</guid><pubDate>Mon, 16 Jun 2025 06:42:49 +0000</pubDate></item><item><title>ArrayList源码分析</title><link>https://xiaoqingxu271.github.io/post/ArrayList-yuan-ma-fen-xi.html</link><description># ArrayList源码
## add源码机制
### 1，创建一个测试类
![Image](https://github.com/user-attachments/assets/4cb94f17-007e-4bf6-a2cf-fb0eb749f668)
创建一个无参构造器的ArrayList，for循环10次向集合中添加数据

### 2，第一次添加数据，先将基本数据类型转换对应的包装类型，进入add方法
![Image](https://github.com/user-attachments/assets/c423965e-d3ae-4053-bdc9-d58a10a0ba12)
modCount记录执行add方法的次数；e表示要添加的元素；elementData表示对象数组，size表示数组的大小；
![Image](https://github.com/user-attachments/assets/d72574e1-2dae-4bec-b4e8-5d1d21915c66)

### 3，进入add方法
![Image](https://github.com/user-attachments/assets/6c08e8e1-1178-48a1-9f1a-581188529236)
先判断elelmentData和size是否相等，相等，执行grow方法
![Image](https://github.com/user-attachments/assets/f1e34e47-b41b-4f17-b983-a90f0b91d062)
![Image](https://github.com/user-attachments/assets/25b6936f-9dfa-4698-89b5-7e31e3a61dfd)
1. minCapacity为最小容量，大小为size加1；oldCapacity为实际容量，大小为elementData的大小
2. 在grow方法中，判断实际数组的容量是否大于0或者是否不为null，显然第一次是不满足，执行else方法
3. 初始化elementData，大小为DEFAULT_CAPACITY(默认初始容量为10)和minCapacity的最大值，显然第一次初始化大小为10
4. 返回add方法，将第一个元素添加到数组的索引为0的位置，数组的大小加一，第一次add结束
5. 由于elementData在第一次add时就初始化为10，所以在执行下面的9次add元素都不会执行grow方法，就是依此添加元素到数组

### 4，在上面的基础上我们在添加一次循环，观察第二次数组扩容的机制
![Image](https://github.com/user-attachments/assets/41aed02e-66ba-4d1d-bdde-556e610bcddb)
添加数组10次后，数组的参数情况
![Image](https://github.com/user-attachments/assets/eb71df08-4146-48c5-9ade-c08314b503e3)
执行grow方法
![Image](https://github.com/user-attachments/assets/25b6936f-9dfa-4698-89b5-7e31e3a61dfd)
1，更新minCapacity为11，oldCapacity为10
2，满足if条件，调用ArraysSupport.newLength方法，返回实际数组长度大小+增长量 给newCapaticy
增长量：在满足最小增长量(minCapacity-oldCapaticy)的情况下，使用推荐增长量(oldCapaticy / 2)
因此，数组的第二次扩容就是按照原来的1.5倍扩容
3，通过数组扩容将扩充elementData的大小为newCapaticy
![Image](https://github.com/user-attachments/assets/8aecb9a8-5c9c-4e6b-b913-f80e7fd0576c)
4，返回add方法，将元素添加到数组中数组的大小加一

### 5，可以通过ArrayList的有参构造器手动设置数组的大小，但是第二次扩容还是按原来的1.5倍扩容













。</description><guid isPermaLink="true">https://xiaoqingxu271.github.io/post/ArrayList-yuan-ma-fen-xi.html</guid><pubDate>Sun, 15 Jun 2025 07:40:46 +0000</pubDate></item></channel></rss>